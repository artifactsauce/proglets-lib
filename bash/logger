#!/usr/bin/env bash

readonly LOGGER_LOG_LEVEL_FATAL=0
readonly LOGGER_LOG_LEVEL_ERROR=1
readonly LOGGER_LOG_LEVEL_WARN=2
readonly LOGGER_LOG_LEVEL_INFO=3
readonly LOGGER_LOG_LEVEL_DEBUG=4
readonly LOGGER_LOG_LEVEL_TRACE=5

: ${LOGGER_LOG_LEVEL:=$LOGGER_LOG_LEVEL_INFO}
: ${LOGGER_DATE_FORMAT:="%x %T"}
: ${LOGGER_OUTPUT:="screen"}
: ${LOGGER_OUTPUT_FILE:="$(pwd)/output.log"}
: ${DEBUG:=0}

if [ $LOGGER_LOG_LEVEL -le $LOGGER_LOG_LEVEL_INFO ] && [ $DEBUG != 0 ]; then
  LOGGER_LOG_LEVEL=$LOGGER_LOG_LEVEL_DEBUG
fi

logger.base() {
  case $LOGGER_OUTPUT in
    file)
      echo "$(date +"${LOGGER_DATE_FORMAT}") $*" >> $LOGGER_OUTPUT_FILE
      ;;
    *)
      echo "$(date +"${LOGGER_DATE_FORMAT}") $*" >&2
      ;;
  esac
}

logger.fatal() {
  [ "$LOGGER_LOG_LEVEL" -ge "$LOGGER_LOG_LEVEL_FATAL" ] || return 0
  logger.base [31m[FATAL] $*[m
}

logger.error() {
  [ "$LOGGER_LOG_LEVEL" -ge "$LOGGER_LOG_LEVEL_ERROR" ] || return 0
  logger.base [35m[ERROR] $*[m
}

logger.warn() {
  [ "$LOGGER_LOG_LEVEL" -ge "$LOGGER_LOG_LEVEL_WARN" ] || return 0
  logger.base [33m[WARN] $*[m
}

logger.info() {
  [ "$LOGGER_LOG_LEVEL" -ge "$LOGGER_LOG_LEVEL_INFO" ] || return 0
  logger.base [32m[INFO] $*[m
}

logger.debug() {
  [ "$LOGGER_LOG_LEVEL" -ge "$LOGGER_LOG_LEVEL_DEBUG" ] || return 0
  logger.base [34m[DEBUG] $*[m
}

logger.trace() {
  [ "$LOGGER_LOG_LEVEL" -ge "$LOGGER_LOG_LEVEL_TRACE" ] || return 0
  logger.base [30m[TRACE] $*[m
}
